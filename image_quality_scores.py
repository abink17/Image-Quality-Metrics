# -*- coding: utf-8 -*-
"""Image Quality Scores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hXhd0YGXt68kN86tUUn4ZsZr-ZraULnG

**Mounting the google drive project folder**
"""

from google.colab import drive
import os
drive.mount('/content/drive/', force_remount=True)
os.chdir('/content/drive/My Drive/Lifelogging/')

"""**Funtion to determine the blur factor of an image**"""

def blur(image):
  def variance_of_laplacian(image):
    #calculating and returning the Laplacian variance of the image
    return cv2.Laplacian(image, cv2.CV_64F).var()

  #converting the image to grayscale for better processing
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  v = variance_of_laplacian(gray)
  text = "Clear"

  if v < 100:
      text = "Blurry"

  #adding blur detail onto the image for intermediate result
  #only if chose to display
  cv2.putText(image, "{}: {:.2f}".format(text, v), (10, 30), cv2.FONT_HERSHEY_PLAIN, 1.7, (250, 0, 0), 2)

  #from google.colab.patches import cv2_imshow
  #cv2_imshow(image)
  return v

"""**Funtion to determine the noise factor of an image**"""

def noise(image):

  #calculating average signal of the image foreground 
  m = np.mean(image)          

  #calculating the stand deviation image background
  s = np.std(image)           

  #Signal-to-Noise ratio
  SNR = 10*math.log10(m/s)    

  return SNR

"""**Function to determine the contrast value of an image**"""

def contrast(image):
  
  #converting the image to grayscale
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  #calculating the variance of the grayscale image
  d = gray.var()

  return d

"""**The principal code block that initiates image processing**"""

#importing necessary libraries for the project
import pathlib
import cv2
import numpy as np
import math
import pandas as pd
import glob

#data_dir = pathlib.Path('/content/drive/My Drive/')

#traversing through the parent folder to determine the total amount of images existing across subfolders
image_count = len(list(glob.glob('/content/drive/My Drive/Lifelogging/**/*.JPG')))
print('Images found\t:',image_count)
print('----------------------------------------------------\n')


#defining the columns of dataframe used for image dataset
image_set = pd.DataFrame(columns = ['Filename','Blur','Noise','Contrast'])

#extracting the list of all image files under the project folder
files = glob.glob('/content/drive/My Drive/Lifelogging/**/*.JPG')

#looping through all the files
for filename in files:
  #converting the path type to string type
  #reading an image file
  image = cv2.imread(str(filename))
  
  #extracting the filename
  base=os.path.basename(str(filename))
  
  #obtaining the blur, noise and contrast values from the distinct functions for the respective image
  blur_count = blur(image)
  noise_count = noise(image)
  contrast_count = contrast(image)
  
  #adding the attribute values to the dataframe
  image_set.loc[len(image_set)] = [base,blur_count,noise_count,contrast_count]

#checking the resultant dataframe
image_set.head()
image_set.tail()

"""**Determining the maximum and minimum values of each attributes existing in the dataset**"""

max_blur = image_set[['Blur']].idxmax()
max_noise = image_set[['Noise']].idxmax()
max_contrast = image_set[['Contrast']].idxmax()

min_blur = image_set[['Blur']].idxmin()
min_noise = image_set[['Noise']].idxmin()
min_contrast = image_set[['Contrast']].idxmin()

print('Blur\n--------------\n',image_set.iloc[max_blur],'\n',image_set.iloc[min_blur],'\n')
print('SNR\n--------------\n',image_set.iloc[max_noise],'\n',image_set.iloc[min_noise],'\n')
print('Contrast\n--------------\n',image_set.iloc[max_contrast],'\n',image_set.iloc[min_contrast],'\n')

"""**Exporting the dataset as .csv**"""

from google.colab import files
image_set.to_csv('Image_data.csv') 
files.download('Image_data.csv')